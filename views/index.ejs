
<!doctype html>
<html lang="en">
  <head>
    <title>Face tracker</title>
    <meta charset="utf-8">
    <link href="/css/main.css" rel="stylesheet" type="text/css">
    <script type="text/javascript">

      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-32642923-1']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();

    </script>
  </head>


  <body>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/javascripts/ext_js/utils.js"></script>
    <script src="/javascripts/clmtrackr.js"></script>
    <script src="/javascripts/models/model_pca_20_svm_emotionDetection.js"></script>
    <script src="/javascripts/ext_js/Stats.js"></script>
    <script src="/javascripts/js/d3.min.js"></script>
    <script src="/javascripts/js/emotion_classifier.js"></script>
    <script src="/javascripts/js/emotionmodel.js"></script>


    <div id="content">

      <div id="container">
        <video id="videoel" width="400" height="300" preload="auto" ></video>
        <canvas id="overlay" width="400" height="300"></canvas>
      </div>

      <div id="light-container">
      </div>
      <div id="left-container">
        <div id="socketFlag">off</div>
        
        <div id="controls">
          <div class="btn" type="button" value="wait, loading video" disabled="disabled" onclick="startVideo()" id="startbutton"></div>
        </div>
        <div id="emotion_container">
          <div id="emotion_icons">
            <img class="emotion_icon" id="icon1" src="./media/icon_angry.png">
            <img class="emotion_icon" id="icon2" src="./media/icon_sad.png">
            <img class="emotion_icon" id="icon3" src="./media/icon_surprised.png">
            <img class="emotion_icon" id="icon4" src="./media/icon_happy.png">
          </div>
          <div id='emotion_chart'></div>
        </div>
      </div>

 

    

      <script>
        var name = prompt("名前を入れてください:");
        var socket = io.connect();
        var socketFlag = false;
        var emotionSums = [0.0, 0.0, 0.0, 0.0];

        socket.on("connect", function() {
          socket.emit("name", name);
          // socket.emit("message", massage); // 初期メッセージ
        });

        document.getElementById('socketFlag').addEventListener('click', function() {
          socketFlag = !socketFlag;
          if(socketFlag) {
            this.textContent = "on";
          } else {
            this.textContent = "off";
          }
        });

        var vid = document.getElementById('videoel');
        var overlay = document.getElementById('overlay');
        var overlayCC = overlay.getContext('2d');
        
        /********** check and set up video/webcam **********/

        function enablestart() {
          var startbutton = document.getElementById('startbutton');
          startbutton.value = "start";
          startbutton.disabled = null;
        }

        function reserveSrc() {
           if(getUrlVars()[0] == "movie2") {
            cueing_at_movie2(6000, 7000);
            cueing_at_movie2(41000, 8000);
            cueing_at_movie2(75000, 10000);
            cueing_at_movie2(114000, 3000);
            return "/media/nakamura_fix2.m4v";
          } else {
            return "/media/nakamura_fix1.m4v";
          }
        }
        
        var insertAltVideo = function(video) {
          if (supports_video()) {
            if (supports_ogg_theora_video()) {
              video.src = reserveSrc();
            } else if (supports_h264_baseline_video()) {
              video.src = reserveSrc();
            } else {
              return false;
            }
            //video.play();
            return true;
          } else return false;
        }

        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
        window.URL = window.URL || window.webkitURL || window.msURL || window.mozURL;

        // check for camerasupport
        if (navigator.getUserMedia) {
          // set up stream
          
          var videoSelector = {video : true};
          if (window.navigator.appVersion.match(/Chrome\/(.*?) /)) {
            var chromeVersion = parseInt(window.navigator.appVersion.match(/Chrome\/(\d+)\./)[1], 10);
            if (chromeVersion < 20) {
              videoSelector = "video";
            }
          };
        
          navigator.getUserMedia(videoSelector, function( stream ) {
            if (vid.mozCaptureStream) {
              vid.mozSrcObject = stream;
            } else {
              vid.src = (window.URL && window.URL.createObjectURL(stream)) || stream;
            }
            vid.play(); 
          }, function() {
            insertAltVideo(vid);
            // alert("There was some problem trying to fetch video from your webcam. If you have a webcam, please make sure to accept when the browser asks for access to your webcam.");
          });
        } else {
          //insertAltVideo(vid);
          // alert("This demo depends on getUserMedia, which your browser does not seem to support. :(");
        }


        /*********** event listner function *************/

        vid.addEventListener('canplay', enablestart, false);
        
        vid.addEventListener('ended', function() {
          ctrack.stop(vid);
          socketFlag = false;
          console.log("resstart");

          if(getUrlVars()[0] == "movie2") {
            location.href = "http://localhost:3000"
          } else {
            location.href = "http://localhost:3000?movie2"
          }
          


          /*
          if(vid.src == "http://localhost:3000/media/nakamura1.mov") {
            vid.src = "http://localhost:3000/media/nakamura9.m4v";
          } else {
            location.href = "http://localhost:3000"
            // vid.src == "http://localhost:3000/media/nakamura1.mov";
          }
          */

          setTimeout( function() { 
            vid.play();
            setTimeout( function() { 
              socket.emit("startflag");
            }, 2000);
          }, 4000);
          
          emotionSums = [0.0, 0.0, 0.0, 0.0];
        }, false);

        document.onkeydown = function (e){
          if(e.keyCode == 83) {
            document.getElementById('startbutton').onclick();
          }
          if(e.keyCode == 69) {
            document.getElementById('socketFlag').click();
          }
          if(e.keyCode == 80) {
            ctrack.stop(vid);
          }
          if(e.keyCode == 79) {
            ctrack.start(vid);
          }
        };

        /*------------ special cueing function super mad -----------*/

        function cueing_at_movie2(stopTime, startTime) {
          setTimeout(function() {
            console.log("stopt!")
            ctrack.stop(vid);
            setTimeout(function() {
              console.log("restart")
              ctrack.start(vid);
            }, startTime);
          }, stopTime);
        }

        /*--------------------init emotion store class-------------------*/
        var pastHappy = new Past(function () {
          return vid.currentTime
        });

        
        /*********** setup of emotion detection *************/

        var ctrack = new clm.tracker({useWebGL : true});
        ctrack.init(pModel);

        function startVideo() {
          console.log("start");
          socket.emit("startflag");
          // start video
          vid.play();
          // start tracking
          ctrack.start(vid);
          // start loop to draw face
          drawLoop();
        }
        
        function drawLoop() {
          requestAnimFrame(drawLoop);
          overlayCC.clearRect(0, 0, 400, 300);
          //psrElement.innerHTML = "score :" + ctrack.getScore().toFixed(4);
          var positions = ctrack.getCurrentPosition();
          if (positions) {
            ctrack.draw(overlay, undefined, "vertices");
          }
          var cp = ctrack.getCurrentParameters();
          
          var er = ec.meanPredict(cp);
          if (er) {
            updateData(er);
            circleUpdate(parseData(er));

          var hapy_state = pastHappy.run(er[3].value);
          if (hapy_state !=undefined) {
            // console.log(hapy_state);
            socket.emit("senddata", "happy", hapy_state);
          }
          


            /*------------socket emit----------------*/
            //
            // CHECK: 今きってます！！！！！
            //
            // if (socketFlag) {
            //   socket.emit("senddata", positions, er);
            // }
            // for (var i = 0;i < er.length;i++) {
            //   if (er[i].value > 0.4) {
            //     document.getElementById('icon'+(i+1)).style.visibility = 'visible';
            //   } else {
            //     document.getElementById('icon'+(i+1)).style.visibility = 'hidden';
            //   }
            // }
          }
        }
        
        var ec = new emotionClassifier();
        ec.init(emotionModel);
        var emotionData = ec.getBlank();  
        
        /************ d3 code for barchart *****************/

        var margin = {top : 20, right : 20, bottom : 0, left : 40},
          width = 400 - margin.left - margin.right,
          height = 350 - margin.top - margin.bottom;

        var barWidth = 40;

        var formatPercent = d3.format(".0%");
        
        var x = d3.scale.linear()
          .domain([0, ec.getEmotions().length]).range([margin.left, width+margin.left]);

        var y = d3.scale.linear()
          .domain([0,1]).range([0, height]);

        var svg = d3.select("#emotion_chart").append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
        
        svg.selectAll("rect").
          data(emotionData).
          enter().
          append("svg:rect").
          attr("x", function(datum, index) { return x(index); }).
          attr("y", function(datum) { return height - y(datum.value); }).
          attr("height", function(datum) { return y(datum.value); }).
          attr("width", barWidth).
          // attr("fill", "#FF8C00");
          attr("fill", function(datum, index) { return ["#ff3399", "#3399ff", "#33ff99", "#ffff0f"][index]; });


        svg.selectAll("text.labels").
          data(emotionData).
          enter().
          append("svg:text").
          attr("x", function(datum, index) { return x(index) + barWidth; }).
          attr("y", function(datum) { return height - y(datum.value); }).
          attr("dx", -barWidth/2).
          attr("dy", "1.2em").
          attr("text-anchor", "middle").
          text(function(datum) { return datum.value;}).
          attr("fill", "white").
          attr("class", "labels");
        
        svg.selectAll("text.yAxis").
          data(emotionData).
          enter().append("svg:text").
          attr("x", function(datum, index) { return x(index) + barWidth; }).
          attr("y", height).
          attr("dx", -barWidth/2).
          attr("text-anchor", "middle").
          attr("style", "font-size: 42").
          attr("style", "font-weight: lighter").
          attr("fill", "white").
          text(function(datum) { return datum.emotion;}).
          attr("transform", "translate(0, 18)").
          attr("class", "yAxis");

        function updateData(data) {
          // update
          var rects = svg.selectAll("rect")
            .data(data)
            .attr("y", function(datum) { return height - y(datum.value); })
            .attr("height", function(datum) { return y(datum.value); });
          var texts = svg.selectAll("text.labels")
            .data(data)
            .attr("y", function(datum) { return height - y(datum.value); })
            .text(function(datum) { return datum.value.toFixed(1);});

          // enter 
          rects.enter().append("svg:rect");
          texts.enter().append("svg:text");

          // exit
          rects.exit().remove();
          texts.exit().remove();
        }


        /******** D3 circle charts *********/
        var circleSvg = d3.select("#light-container")
          .append("svg")
          .attr("width", 600)
          .attr("height",350)
          .append("g")
   
        circleSvg.append("g")
          .attr("class", "slices");
        circleSvg.append("g")
          .attr("class", "labels");
        circleSvg.append("g")
          .attr("class", "lines");

        var circleWidth = 600,
            circleHeight = 350,
          circleRadius = Math.min(circleWidth, circleHeight) / 2;

        var circlePie = d3.layout.pie()
          .sort(null)
          .value(function(d) {
            return d.value;
          });

        var circleArc = d3.svg.arc()
          .outerRadius(circleRadius * 0.9)
          .innerRadius(circleRadius * 0.4);

        var circleOuterArc = d3.svg.arc()
          .innerRadius(circleRadius * 0.9)
          .outerRadius(circleRadius * 0.9);

        circleSvg.attr("transform", "translate(" + circleWidth / 2 + "," + circleHeight / 2 + ")");

        var circleKey = function(d){ return d.data.label; };

        var cicleColor = d3.scale.ordinal()
          .domain(["Angry", "Sad", "Surprised", "Happy"])
          .range(["#ff3399", "#3399ff", "#33ff99", "#ffff0f"]);

        function randomData (){
          var labels = cicleColor.domain();
          return labels.map(function(label){
            return { label: label, value: Math.random() }
          });
        }

        function parseData (datas){
          var labels = cicleColor.domain();
          return labels.map(function(label, index){
            emotionSums[index] += datas[index].value;  // cHeck:  increment!!
            return { label: label, value: emotionSums[index] }
          });
        }


        d3.select(".randomize")
          .on("click", function(){
            circleUpdate(randomData());
          });


        function circleUpdate(data) {

          /* ------- PIE SLICES -------*/
          var slice = circleSvg.select(".slices").selectAll("path.slice")
            .data(circlePie(data), circleKey);

          slice.enter()
            .insert("path")
            .style("fill", function(d) { return cicleColor(d.data.label); })
            .attr("class", "slice");

          slice   
            .transition().duration(33)
            .attrTween("d", function(d) {
              this._current = this._current || d;
              var interpolate = d3.interpolate(this._current, d);
              this._current = interpolate(0);
              return function(t) {
                return circleArc(interpolate(t));
              };
            })

          slice.exit()
            .remove();

          /* ------- TEXT LABELS -------*/

          var text = circleSvg.select(".labels").selectAll("text")
            .data(circlePie(data), circleKey);

          text.enter()
            .append("text")
            .attr("dy", ".35em")
            .attr("fill", "white")
            .text(function(d) {
              return d.data.label;
            });
          
          function midAngle(d){
            return d.startAngle + (d.endAngle - d.startAngle)/2;
          }

          text.transition().duration(33)
            .attrTween("transform", function(d) {
              this._current = this._current || d;
              var interpolate = d3.interpolate(this._current, d);
              this._current = interpolate(0);
              return function(t) {
                var d2 = interpolate(t);
                var pos = circleOuterArc.centroid(d2);
                pos[0] = circleRadius * (midAngle(d2) < Math.PI ? 1 : -1);
                return "translate("+ pos +")";
              };
            })
            .styleTween("text-anchor", function(d){
              this._current = this._current || d;
              var interpolate = d3.interpolate(this._current, d);
              this._current = interpolate(0);
              return function(t) {
                var d2 = interpolate(t);
                return midAngle(d2) < Math.PI ? "start":"end";
              };
            });

          text.exit()
            .remove();

          /* ------- SLICE TO TEXT POLYLINES -------*/

          var polyline = circleSvg.select(".lines").selectAll("polyline")
            .data(circlePie(data), circleKey);
          
          polyline.enter()
            .append("polyline");
          polyline.attr("fill", "none")
            .attr("stroke", "white")
            .attr("stroke-width", "0.5");

          polyline.transition().duration(33)
            .attrTween("points", function(d){
              this._current = this._current || d;
              var interpolate = d3.interpolate(this._current, d);
              this._current = interpolate(0);
              return function(t) {
                var d2 = interpolate(t);
                var pos = circleOuterArc.centroid(d2);
                pos[0] = circleRadius * 0.95 * (midAngle(d2) < Math.PI ? 1 : -1);
                return [circleArc.centroid(d2), circleOuterArc.centroid(d2), pos];
              };      
            });
          
          polyline.exit()
            .remove();
        };


        /******** stats ********/

        stats = new Stats();
        stats.domElement.style.position = 'absolute';
        stats.domElement.style.top = '0px';
        document.getElementById('container').appendChild( stats.domElement );

        // update stats on every iteration
        document.addEventListener('clmtrackrIteration', function(event) {
          stats.update();
        }, false);

        window.onload = function() {
          setTimeout( function() { 
            document.getElementById('startbutton').onclick();

            document.getElementById('socketFlag').click()
          }, 4000);

        }

        /*******   utils  *******/ 

        var val = getUrlVars();

        function getUrlVars() {
          var vars = [], max = 0, hash = "", array = "";
          var url = window.location.search;

              //?を取り除くため、1から始める。複数のクエリ文字列に対応するため、&で区切る
          hash  = url.slice(1).split('&');    
          max = hash.length;
          for (var i = 0; i < max; i++) {
              array = hash[i].split('=');    //keyと値に分割。
              vars.push(array[0]);    //末尾にクエリ文字列のkeyを挿入。
              vars[array[0]] = array[1];    //先ほど確保したkeyに、値を代入。
          }
          return vars;
        }

        function Past (callback) {
          var flag = false;
          var start_val;
          var score_sum;
          var count;

          return {
            run: function (val) {
              if (val > 0.4) {
              score_sum += val;
              count += 1;
                if (!flag) {
                  score_sum = 0;
                  count = 0;
                  flag = true;
                  start_val = callback.apply();
                  // return "start"
                }
              }
          
              if (val < 0.4) {
                if (flag) {
                  flag = false;
                  return [start_val, callback.apply(), (score_sum / count)]
                  // return "end"
                }
              }

              return
            },
            show: function () {
              return start_val;
            }
          }
        }
        
      </script>
    </div>
  </body>
</html>
