
<!doctype html>
<html lang="en">
  <head>
    <title>Face tracker</title>
    <meta charset="utf-8">
    <link href="/css/main.css" rel="stylesheet" type="text/css">
    <script type="text/javascript">

      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-32642923-1']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();

    </script>
  </head>


  <body>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/javascripts/ext_js/utils.js"></script>
    <script src="/javascripts/clmtrackr.js"></script>
    <script src="/javascripts/models/model_pca_20_svm_emotionDetection.js"></script>
    <script src="/javascripts/ext_js/Stats.js"></script>
    <script src="/javascripts/js/d3.min.js"></script>
    <script src="/javascripts/js/emotion_classifier.js"></script>
    <script src="/javascripts/js/emotionmodel.js"></script>


    <div id="content">
      <button id="socketFlag">off</button>
      
      <div id="controls">
        <input class="btn" type="button" value="wait, loading video" disabled="disabled" onclick="startVideo()" id="startbutton"></input>
      </div>


      <div id="emotion_container">
        <div id="emotion_icons">
          <img class="emotion_icon" id="icon1" src="./media/icon_angry.png">
          <img class="emotion_icon" id="icon2" src="./media/icon_sad.png">
          <img class="emotion_icon" id="icon3" src="./media/icon_surprised.png">
          <img class="emotion_icon" id="icon4" src="./media/icon_happy.png">
        </div>
        <div id='emotion_chart'></div>
      </div>

      <div id="container">
        <video id="videoel" width="400" height="300" preload="auto" loop></video>
        <canvas id="overlay" width="400" height="300"></canvas>
      </div>

      <script>
        var name = prompt("名前を入れてください:");
        var socket = io.connect();
        var socketFlag = false;

        socket.on("connect", function() {
          socket.emit("name", name);
          // socket.emit("message", massage); // 初期メッセージ
        });

        document.getElementById('socketFlag').addEventListener('click', function() {
          socketFlag = !socketFlag;
          if(socketFlag) {
            this.textContent = "on";
          } else {
            this.textContent = "off";
          }
        });

        var vid = document.getElementById('videoel');
        var overlay = document.getElementById('overlay');
        var overlayCC = overlay.getContext('2d');
        
        /********** check and set up video/webcam **********/

        function enablestart() {
          var startbutton = document.getElementById('startbutton');
          startbutton.value = "start";
          startbutton.disabled = null;
        }
        
        /*var insertAltVideo = function(video) {
          if (supports_video()) {
            if (supports_ogg_theora_video()) {
              video.src = "../media/cap12_edit.ogv";
            } else if (supports_h264_baseline_video()) {
              video.src = "../media/cap12_edit.mp4";
            } else {
              return false;
            }
            //video.play();
            return true;
          } else return false;
        }*/
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
        window.URL = window.URL || window.webkitURL || window.msURL || window.mozURL;

        // check for camerasupport
        if (navigator.getUserMedia) {
          // set up stream
          
          var videoSelector = {video : true};
          if (window.navigator.appVersion.match(/Chrome\/(.*?) /)) {
            var chromeVersion = parseInt(window.navigator.appVersion.match(/Chrome\/(\d+)\./)[1], 10);
            if (chromeVersion < 20) {
              videoSelector = "video";
            }
          };
        
          navigator.getUserMedia(videoSelector, function( stream ) {
            if (vid.mozCaptureStream) {
              vid.mozSrcObject = stream;
            } else {
              vid.src = (window.URL && window.URL.createObjectURL(stream)) || stream;
            }
            vid.play(); 
          }, function() {
            //insertAltVideo(vid);
            alert("There was some problem trying to fetch video from your webcam. If you have a webcam, please make sure to accept when the browser asks for access to your webcam.");
          });
        } else {
          //insertAltVideo(vid);
          alert("This demo depends on getUserMedia, which your browser does not seem to support. :(");
        }

        vid.addEventListener('canplay', enablestart, false);
        
        /*********** setup of emotion detection *************/

        var ctrack = new clm.tracker({useWebGL : true});
        ctrack.init(pModel);

        function startVideo() {
          // start video
          vid.play();
          // start tracking
          ctrack.start(vid);
          // start loop to draw face
          drawLoop();
        }
        
        function drawLoop() {
          requestAnimFrame(drawLoop);
          overlayCC.clearRect(0, 0, 400, 300);
          //psrElement.innerHTML = "score :" + ctrack.getScore().toFixed(4);
          var positions = ctrack.getCurrentPosition();
          if (positions) {
            ctrack.draw(overlay, undefined, "vertices");
          }
          var cp = ctrack.getCurrentParameters();
          
          var er = ec.meanPredict(cp);
          if (er) {
            updateData(er);
            
            /*------------socket emit----------------*/
            if (socketFlag) {
              socket.emit("senddata", positions, er);
            }
            for (var i = 0;i < er.length;i++) {
              if (er[i].value > 0.4) {
                document.getElementById('icon'+(i+1)).style.visibility = 'visible';
              } else {
                document.getElementById('icon'+(i+1)).style.visibility = 'hidden';
              }
            }
          }
        }
        
        var ec = new emotionClassifier();
        ec.init(emotionModel);
        var emotionData = ec.getBlank();  
        
        /************ d3 code for barchart *****************/

        var margin = {top : 20, right : 20, bottom : 10, left : 0},
          width = 100 - margin.left - margin.right,
          height = 400 - margin.top - margin.bottom;

        var barWidth = 40;

        var formatPercent = d3.format(".0%");
        
        // domainが数, rangeが値の範囲
        // 4つのパラメータだが、ひとつのグラフとして表現するぽい
        var x = d3.scale.linear()
          .domain([0,1]).range([0, height]);

        var y = d3.scale.linear()
          .domain([0, ec.getEmotions().length]).range([margin.left, width+margin.left]);

        // d3はselectでエレメントをgetできるらしい、それにsvgというelementをたす
        var svg = d3.select("#emotion_chart").append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom)
        
        // selectAll()するとinitした全ての属性を握れるっぽい
        // data()でデータをセットできる、あらかじめ用意したデータ形式を
        // enter()でトリガーするのかな
        // そのあとsvg:rectというものを追加して
        // attrで値を変更する、callback形式でsvgからの値を引き出しているように見える
        // yはheightから yの値を引いたものとしている
        // そのほかheightとwidthをそれぞれattrを設定している
        svg.selectAll("rect").
          data(emotionData).
          enter().
          append("svg:rect").
          attr("x", function(datum, index) { return x(index); }).
          attr("y", function(datum) { return height - y(datum.value); }).
          attr("height", function(datum) { return y(datum.value); }).
          attr("width", barWidth).
          attr("fill", "#2d578b");

        // こちらは値の数値を表示しているところかな
        // dxはバーの長さの半分、dyは1.2emってなんのことなんだろう
        svg.selectAll("text.labels").
          data(emotionData).
          enter().
          append("svg:text").
          attr("x", function(datum, index) { return x(index) + barWidth; }).
          attr("y", function(datum) { return height - y(datum.value); }).
          attr("dx", -barWidth/2).
          attr("dy", "1.2em").
          attr("text-anchor", "middle").
          text(function(datum) { return datum.value;}).
          attr("fill", "white").
          attr("class", "labels");
        
        // ここはよく分からない
        svg.selectAll("text.yAxis").
          data(emotionData).
          enter().append("svg:text").
          attr("x", function(datum, index) { return x(index) + barWidth; }).
          attr("y", height).
          attr("dx", -barWidth/2).
          attr("text-anchor", "middle").
          attr("style", "font-size: 12").
          text(function(datum) { return datum.emotion;}).
          attr("transform", "translate(0, 18)").
          attr("class", "yAxis");

        function updateData(data) {
          // update
          var rects = svg.selectAll("rect")
            .data(data)
            .attr("y", function(datum) { return height - y(datum.value); })
            .attr("height", function(datum) { return y(datum.value); });
          var texts = svg.selectAll("text.labels")
            .data(data)
            .attr("y", function(datum) { return height - y(datum.value); })
            .text(function(datum) { return datum.value.toFixed(1);});

          // enter 
          rects.enter().append("svg:rect");
          texts.enter().append("svg:text");

          // exit
          rects.exit().remove();
          texts.exit().remove();
        }

        /******** stats ********/

        stats = new Stats();
        stats.domElement.style.position = 'absolute';
        stats.domElement.style.top = '0px';
        document.getElementById('container').appendChild( stats.domElement );

        // update stats on every iteration
        document.addEventListener('clmtrackrIteration', function(event) {
          stats.update();
        }, false);
        
      </script>
    </div>
  </body>
</html>
